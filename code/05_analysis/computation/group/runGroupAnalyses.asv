function [groupResultsDataset, groupResultsTable] = runGroupAnalyses(presets, groupDataset)

% TO DO:
    % Plot clusters
    % How can we make this more efficient? Re: concatenating to table
    % Write to file
    % Error handling

% Initialise results table
tableVars = {...
    'block', ...
    'morphs', ...
    'cluster', ...
    'p', ...
    'start time', ...
    'end time', ...
    'channels', ...
    'summed sample t', ...
    'max sample t', ...
    'n probe', ...
    'n irrelevant', ...
    'df', ...
    'd' ...
    };
tableVarTypes = {...
    'string', ...
    'string', ...
    'double', ...
    'double', ...
    'double', ...
    'double', ...
    'cell', ...
    'double', ...
    'double', ...
    'double', ...
    'double', ...
    'double', ...
    'double' ...
    };
numTableVars = numel(tableVars);
groupResultsTable = table(...
    'Size', [0, numTableVars], ...
    'VariableNames', tableVars, ...
    'VariableTypes', tableVarTypes ...
    );

% Initialise contrasts to iterate through
setup = presets.analysis.group.setup;

blocks = setup.blocks;
morphSets = setup.morphSets;

[blockGrid, morphSetGrid] = ndgrid(...
    blocks, morphSets);

contrastMatrix = [blockGrid(:), morphSetGrid(:)];
numContrasts = length(contrastMatrix);

for iContrast = 1:numContrasts
    block = blockGrid{iContrast};
    morphSet = morphSetGrid{iContrast};
    morphSetField = ['morphs', num2str(morphSet, '_%d')];
    morphSetString = strrep(num2str(morphSet), '  ', ' & ');

    fprintf('\n Running group contrast %s - %s... \n\n', block, morphSetString)

    probeData = groupDataset.(block).probe;
    irrelevantData = groupDataset.(block).irrelevant;

    probeERPs = probeData.(morphSetField).subjectERPs;
    irrelevantERPs = irrelevantData.(morphSetField).subjectERPs;

    results = runGroupAnalysis(presets, probeERPs, irrelevantERPs);

    groupResultsDataset.(block).(morphSetField) = results;

    % Implement function to check for significance, instead

    % If no positive clusters
    if ~isfield(results, 'posclusters')
        disp('\n No positive clusters found. \n\n')

        iCluster = NaN;
        pValue = NaN;
        startTime = NaN;
        endTime = NaN;
        channels = NaN;
        sumSampleT = NaN;
        maxSampleT = NaN;
        nProbe = NaN;
        nIrrelevant = NaN;
        df = NaN;
        cohensD = NaN;

        newRow = {...
            block, ...
            morphSetString, ...
            iCluster, ...
            pValue, ...
            startTime, ...
            endTime, ...
            channels, ...
            sumSampleT, ...
            maxSampleT, ...
            nProbe, ...
            nIrrelevant, ...
            df, ...
            cohensD ...
            };

        groupResultsTable = [groupResultsTable; newRow];

    else
        pValues = [results.posclusters(:).prob];
        isSignificant = find(pValues < 0.05);
        numSignificant = numel(isSignificant);

        % If no significant positive clusters
        if numSignificant == 0
            fprintf('\n No significant positive clusters found. \n\n')
            numClusters = 1;

            % If significant positive clusters
        elseif numSignificant > 0
            fprintf(...
                '\n %d significant positive clusters found. \n\n', ...
                numSignificant ...
                )
            numClusters = numSignificant;

            % Plot significant clusters
            plotSaveFolder = 'derivatives/results/plots/clusters/group/';
            plotSaveName = ...
                sprintf('%s_%s_groupClusters', block, morphSetField);
            plotClusters(presets, results, [plotSaveFolder, plotSaveName]) 

        end

        for iCluster = 1:numClusters
            pValue = results.posclusters(iCluster).prob;
    
            [clusterChannelNumbers, clusterSamples] = ...
                find(results.posclusterslabelmat == iCluster);
            
            startSample = min(clusterSamples);
            endSample = max(clusterSamples);
            startTime = results.time(startSample);
            endTime = results.time(endSample);
            
            channels = ...
                strjoin(...
                    unique(...
                        results.label(clusterChannelNumbers), ...
                        'stable'), ...
                    ', ');
            
            isClusterSampleStat = ...
                find(results.posclusterslabelmat(:) == iCluster);
            clusterSampleStat = results.stat(isClusterSampleStat);
            sumSampleT = sum(clusterSampleStat);
            maxSampleT = max(clusterSampleStat);
            
            nProbe = numel(fieldnames(probeERPs));
            nIrrelevant = numel(fieldnames(irrelevantERPs));
            df = nProbe + nIrrelevant - 2;
            cohensD = maxSampleT / sqrt(df);

            newRow = {...
                block, ...
                morphSetString, ...
                iCluster, ...
                pValue, ...
                startTime, ...
                endTime, ...
                channels, ...
                sumSampleT, ...
                maxSampleT, ...
                nProbe, ...
                nIrrelevant, ...
                df, ...
                cohensD ...
                };
    
            groupResultsTable = [groupResultsTable; newRow];

        end
    end
end

if isfield(presets.paths.output.results.group, 'data')
% Write dataset to file if specified
if isfield(presets.paths.output.results.group, 'data')
    save( ...
        [presets.paths.output.results.group.data, ...
        'groupResultsDataset'], ...
        'groupResultsDataset', ...
        '-nocompression', ...
        '-v7.3' ...
        )
    save( ...
        [presets.paths.output.results.group.data, ...
        'groupResultsDataset'], ...
        'groupResultsDataset', ...
        '-nocompression', ...
        '-v7.3' ...
        ) 
end
