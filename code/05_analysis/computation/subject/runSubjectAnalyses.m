function [subjectResultsDataset, subjectResultsTable] = runSubjectAnalyses(presets, subjectDataset, varargin)
    
% Initialise results table
tableVariables = {...
    'subject', ...
    'block', ...
    'morphs', ...
    'cluster', ...
    'p', ...
    'start time', ...
    'end time', ...
    'channels', ...
    'summed sample t', ...
    'max sample t', ...
    'n probe', ...
    'n irrelevant', ...
    'df', ...
    'cohens d' ...
    };
tableVariableTypes = {...
    'double', ...
    'string', ...
    'string', ...
    'double', ...
    'double', ...
    'double', ...
    'double', ...
    'cell', ...
    'double', ...
    'double', ...
    'double', ...
    'double', ...
    'double', ...
    'double' ...
    };
numTableVars = numel(tableVariables);
subjectResultsTable = table(...
    'Size', [0, numTableVars], ...
    'VariableNames', tableVariables, ...
    'VariableTypes', tableVariableTypes ...
    );

% Initialise contrast presets
setup = presets.analysis.subject.setup;
subjects = setup.subjects;
blocks = setup.blocks;
morphSets = setup.morphSets;
[subjectGrid, blockGrid, morphSetGrid] = ...
    ndgrid(subjects, blocks, morphSets);
contrastMatrix = [subjectGrid(:), blockGrid(:), morphSetGrid(:)];
numContrasts = length(contrastMatrix);

% Run all contrasts
for iContrast = 1:numContrasts
    subject = subjectGrid{iContrast};
    subjectID = sprintf('sub%02d', subject);
    block = blockGrid{iContrast};
    morphSet = morphSetGrid{iContrast};
    morphSetField = ['morphs', num2str(morphSet, '_%d')];
    morphSetString = strrep(num2str(morphSet), '  ', ' & ');

    contrastInfo = {...
        subject, ...
        block, ...
        morphSetString ...
        };
    fprintf(['\n',...
        'Running contrast probe vs irrelevant: \n', ...
        '%s - %s - %s \n\n'], subjectID, block, morphSetString)

    % If insufficient probe data to run contrast
    if ~isfield(subjectDataset.(subjectID).(block).probe, morphSetField)
        fprintf(['\n', ...
            'No probe data found for %s - %s - %s.', ...
            '\n', ...
            'Skipping contrast...', ...
            '\n'], ...
            subjectID, block, morphSetString)
        continue
    elseif numel(subjectDataset.(subjectID).(block).probe.(morphSetField).trials.trial) < 2
        fprintf(['\n', ...
            'Insufficient (<2) probe trials in %s - %s - %s', ...
            '\n'], ...
            subjectID, block, morphSetString)
        continue

    % If insufficient irrelevant data to run contrast
    elseif ~isfield(subjectDataset.(subjectID).(block).irrelevant, morphSetField)
        fprintf(['\n', ...
            'No irrelevant data found for %s - %s - %s.', ...
            'Skipping contrast...', ...
            '\n'], ...
            subjectID, block, morphSetString)
        continue
    elseif numel(subjectDataset.(subjectID).(block).irrelevant.(morphSetField).trials.trial) < 2
        fprintf(['\n', ...
            'Insufficient (<2) irrelevant trials in %s - %s - %s', ...
            '\n'], ...
            subjectID, block, morphSetString)
        continue
        
    % If sufficient data to run contrast
    else
        probeTrials = ...
            subjectDataset.(subjectID).(block).probe.(morphSetField).trials;
        irrelevantTrials = ...
            subjectDataset.(subjectID).(block).irrelevant.(morphSetField).trials;
    
        % Use ROI if provided
        if nargin > 2
            roiDataset = varargin{1};
            roi = roiDataset.(subjectID).(block).probe_irrelevant.(morphSetField);
            results = ...
                runSubjectAnalysis(presets, probeTrials, irrelevantTrials, roi);
        else
            results = ...
                runSubjectAnalysis(presets, probeTrials, irrelevantTrials);
        end

        % Log results in dataset
        subjectResultsDataset.(subjectID).(block).(morphSetField) = results;

        % Get key cluster results statistics
        clusterStats = getClusterStats(results, probeTrials, irrelevantTrials);

        % If significant cluster(s) found
        if clusterStats.cluster1.pValue < 0.05

            % Plot all significant clusters
            if nargin < 3
                plotSaveFolder = presets.paths.output.results.subject.plots;
                plotSaveName = ...
                    sprintf('%s_%s_%s_subjectClusters', subjectID, block, morphSetField);
                plotClusters(presets, results, [plotSaveFolder, plotSaveName])
            end
        end
    
        % Add key stats to results table
        clusters = fieldnames(clusterStats);
        numClusters = numel(clusters);
        for iCluster = 1:numClusters
            cluster = clusters{iCluster};
            statsCell = struct2cell(clusterStats.(cluster))';
            newRow = [contrastInfo, statsCell];
            subjectResultsTable = [subjectResultsTable; newRow];
        end
    end
end

if nargin < 3
    if isfield(presets.paths.output.results.subject, 'data')
%         save( ...
%             [presets.paths.output.results.subject.data, ...
%             'subjectResultsDataset'], ...
%             'subjectResultsDataset', ...
%             '-nocompression', ...
%             '-v7.3' ...
%             )
%         save( ...
%             [presets.paths.output.results.subject.data, ...
%             'subjectResultsTable'], ...
%             'subjectResultsTable', ...
%             '-nocompression', ...
%             '-v7.3' ...
%             )
%         writetable(...
%             subjectResultsTable, ...
%             [presets.paths.output.results.subject.data, ...
%             'subjectResultsTable.xlsx'] ...
%             )
    end
elseif nargin > 2
    if isfield(presets.paths.output.results.subject.roi, 'data')
        subjectRoiResultsDataset = subjectResultsDataset;
        subjectRoiResultsTable = subjectResultsTable;
        save( ...
            [presets.paths.output.results.subject.roi.data, ...
            'subjectRoiResultsDataset'], ...
            'subjectRoiResultsDataset', ...
            '-nocompression', ...
            '-v7.3' ...
            )
        save( ...
            [presets.paths.output.results.subject.roi.data, ...
            'subjectRoiResultsTable'], ...
            'subjectRoiResultsTable', ...
            '-nocompression', ...
            '-v7.3' ...
            )
        writetable(...
            subjectResultsTable, ...
            [presets.paths.output.results.subject.roi.data, ...
            'subjectRoiResultsTable.xlsx'] ...
            )
    end

end
